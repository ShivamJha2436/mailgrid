name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]

env:
  GO_VERSION: '1.21'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Code quality and testing
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        go-version: ['1.20', '1.21']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}
    
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ matrix.go-version }}-
    
    - name: Install dependencies
      run: |
        go mod download
        go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest

    - name: Install govulncheck (Go >= 1.22 only)
      if: contains('1.22 1.23 1.24', matrix.go-version)
      run: |
        go install golang.org/x/vuln/cmd/govulncheck@latest
    
    - name: Format check
      run: |
        gofmt -l .
        test -z "$(gofmt -l .)"
    
    - name: Lint
      run: |
        go vet ./...
        golangci-lint run ./...
    
    - name: Test
      run: |
        go test -v -race -coverprofile=coverage.out ./...
        go tool cover -func=coverage.out
    
    - name: Security check (only on modern Go)
      if: contains('1.22 1.23 1.24', matrix.go-version)
      run: govulncheck ./...
    
    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.go-version == '1.21'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out

  # Build binaries
  build:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ env.GO_VERSION }}-${{ hashFiles('**/go.sum') }}
    
    - name: Build for all platforms
      run: |
        make build-all
        ls -la dist/
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: binaries
        path: dist/
        retention-days: 30

  # Docker build and push
  docker:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=sha
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          VERSION=${{ github.ref_type == 'tag' && github.ref_name || github.sha }}
          COMMIT_HASH=${{ github.sha }}
          BUILD_DATE=${{ github.event.head_commit.timestamp }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Create GitHub release
  release:
    needs: [test, build, docker]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    
    permissions:
      contents: write
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: binaries
        path: dist/
    
    - name: Create release archives
      run: make release
    
    - name: Generate release notes
      id: generate_notes
      run: |
        # Get the tag name
        TAG=${GITHUB_REF#refs/tags/}
        echo "tag=$TAG" >> $GITHUB_OUTPUT
        
        # Generate changelog since last tag
        PREV_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
        if [ -n "$PREV_TAG" ]; then
          echo "## Changes since $PREV_TAG" > release_notes.md
          git log --pretty=format:"- %s (%h)" $PREV_TAG..HEAD >> release_notes.md
        else
          echo "## Initial Release" > release_notes.md
          echo "First release of Mailgrid!" >> release_notes.md
        fi
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.generate_notes.outputs.tag }}
        name: Release ${{ steps.generate_notes.outputs.tag }}
        body_path: release_notes.md
        files: |
          dist/archives/*
        draft: false
        prerelease: ${{ contains(github.ref_name, '-') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Benchmark performance
  benchmark:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Run benchmarks
      run: |
        go test -bench=. -benchmem ./... | tee benchmark.txt
    
    - name: Comment benchmark results
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const benchmark = fs.readFileSync('benchmark.txt', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `## Benchmark Results\n\`\`\`\n${benchmark}\n\`\`\``
          });

  # Dependency analysis
  deps:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Check for outdated dependencies
      run: |
        echo "## Dependency Status" > deps_report.md
        echo "\`\`\`" >> deps_report.md
        go list -u -m all >> deps_report.md
        echo "\`\`\`" >> deps_report.md
    
    - name: Upload dependency report
      uses: actions/upload-artifact@v4
      with:
        name: dependency-report
        path: deps_report.md
